{"version":3,"sources":["components/Todo.js","components/SubmitForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","className","type","checked","this","props","item","completed","onChange","handleCompleted","id","style","textDecoration","color","fontStyle","text","Component","SubmitForm","state","todo_item","handleSubmit","event","preventDefault","onSubmitForm","Date","now","setState","onSubmit","placeholder","name","value","target","App","todos","addItems","bind","todo_items","map","Object","assign","submittedTask","completedTasks","filter","length","todoItems","key","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAqBeA,G,4KAlBH,IAAD,OAMP,OACE,yBAAKC,UAAU,aACb,2BACEC,KAAK,WACLC,QAASC,KAAKC,MAAMC,KAAKC,UACzBC,SAAU,kBAAM,EAAKH,MAAMI,gBAAgB,EAAKJ,MAAMC,KAAKI,OAE7D,uBAAGC,MAAOP,KAAKC,MAAMC,KAAKC,UAZR,CACpBK,eAAe,eACfC,MAAM,SACNC,UAAU,UAS0C,MAAOV,KAAKC,MAAMC,KAAKS,W,GAd9DC,cCgCJC,E,4MA/BbC,MAAM,CAACC,UAAU,I,EACfC,aAAa,SAACC,GACVA,EAAMC,iBACoB,KAAvB,EAAKJ,MAAMC,YAIV,EAAKd,MAAMkB,aAAaC,KAAKC,MAAM,EAAKP,MAAMC,WAAU,GACxD,EAAKO,SAAS,CAACP,UAAU,O,uDAIzB,IAAD,OACP,OACE,6BACE,0BAAMQ,SAAUvB,KAAKgB,cACnB,2BAAOnB,UAAU,cACfC,KAAK,OACL0B,YAAY,kBACZC,KAAK,OACLC,MAAO1B,KAAKc,MAAMC,UAClBX,SAAU,SAACa,GAAD,OACR,EAAKK,SAAS,CAAEP,UAAWE,EAAMU,OAAOD,WAG5C,4BAAQ7B,UAAU,0BAAlB,gB,GA1Bee,aC2DVgB,E,kDAxDb,aAAe,IAAD,8BACZ,gBAEKd,MAAQ,CACXe,MAAO,IAGT,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAK1B,gBAAkB,EAAKA,gBAAgB0B,KAArB,gBARX,E,4DAWEzB,GAEd,IAAM0B,EAAahC,KAAKc,MAAMe,MAAMI,KAAI,SAAC/B,GACvC,OAAIA,EAAKI,KAAOA,EACP4B,OAAOC,OAAO,GAAIjC,EAAM,CAC7BC,WAAYD,EAAKC,YAGZD,KAIXF,KAAKsB,SAAS,CACZO,MAAOG,M,+BAKF1B,EAAIK,EAAMR,GACjB,IAAMiC,EAAgB,CAAE9B,GAAIA,EAAIK,KAAMA,EAAMR,UAAWA,GACvDH,KAAKsB,SAAS,CAAEO,MAAM,GAAD,mBAAM7B,KAAKc,MAAMe,OAAjB,CAAwBO,Q,+BAGrC,IAAD,OAEDC,EAAiBrC,KAAKc,MAAMe,MAAMS,QAAO,SAACpC,GAAD,OAAUA,EAAKC,aAC3DoC,OACGC,EAAYxC,KAAKc,MAAMe,MAAMI,KAAI,SAAC/B,GAAD,OACrC,kBAAC,EAAD,CAAMuC,IAAKvC,EAAKI,GAAID,gBAAiB,EAAKA,gBAAiBH,KAAMA,OAEnE,OACE,yBAAKL,UAAU,aACb,4BACE,0BAAMU,MAAO,CAAEE,MAAO,SAAUiC,SAAU,SACvCL,GACK,IAHV,mBAMCG,EACD,6BACA,kBAAC,EAAD,CAAYrB,aAAcnB,KAAK8B,gB,GApDrBlB,aCQE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACG,kBAAC,EAAD,OAEHC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7c8075ee.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nclass Todo extends Component {\r\n  render() {\r\n    const completedItem = {\r\n      textDecoration:\"line-through\",\r\n      color:\"orange\",\r\n      fontStyle:\"italic\"\r\n    };\r\n    return (\r\n      <div className=\"todo-item\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={this.props.item.completed}\r\n          onChange={() => this.props.handleCompleted(this.props.item.id)}\r\n        />\r\n        <p style={this.props.item.completed?completedItem:null}>{this.props.item.text}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\"\r\nclass SubmitForm extends Component {\r\n  state={todo_item:\"\"}\r\n    handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        if(this.state.todo_item===\"\"){\r\n            return\r\n        }\r\n        else{\r\n            this.props.onSubmitForm(Date.now(),this.state.todo_item,false)\r\n            this.setState({todo_item:\"\"})\r\n        }\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input className=\"submitInput\"\r\n            type=\"text\"\r\n            placeholder=\"enter your task\"\r\n            name=\"todo\"\r\n            value={this.state.todo_item}\r\n            onChange={(event) =>\r\n              this.setState({ todo_item: event.target.value })\r\n            }\r\n          />\r\n          <button className=\"ui orange basic button\">submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SubmitForm;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todo from \"./components/Todo\";\nimport SubmitForm from \"./components/SubmitForm\";\nclass App extends Component {\n  constructor() {\n    super();\n    //initial state  \n    this.state = {\n      todos: []\n    };\n    // should bind for setState method\n    this.addItems = this.addItems.bind(this);\n    this.handleCompleted = this.handleCompleted.bind(this);\n  }\n  // method to handle completed tasks \n  handleCompleted(id) {\n    // map returns new array with out mutating existing array\n    const todo_items = this.state.todos.map((item) => {\n      if (item.id === id) {\n        return Object.assign({}, item, {\n          completed: !item.completed\n        });\n      } else {\n        return item;\n      }\n    });\n    // new updated todo items \n    this.setState({\n      todos: todo_items\n    });\n  }\n\n  // adding new tasks \n  addItems(id, text, completed) {\n    const submittedTask = { id: id, text: text, completed: completed };\n    this.setState({ todos: [...this.state.todos, submittedTask] });\n  }\n\n  render() {\n  \n    const completedTasks = this.state.todos.filter((item) => item.completed)\n      .length;\n    const todoItems = this.state.todos.map((item) => (\n      <Todo key={item.id} handleCompleted={this.handleCompleted} item={item} />\n    ));\n    return (\n      <div className=\"todo-list\">\n        <h4>\n          <span style={{ color: \"orange\", fontSize: \"30px\" }}>\n            {completedTasks}\n          </span>{\" \"}\n          tasks completed\n        </h4>\n        {todoItems}\n        <br />\n        <SubmitForm onSubmitForm={this.addItems} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n     <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}